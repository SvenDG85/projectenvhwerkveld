- name: Setup WordPress backup to DigitalOcean Spaces
  hosts: WordPress2.deeptoys.be  # Target server for the playbook
  become: yes  # Enable privilege escalation
  vars:
    do_api_token: "dop_v1_e73206e3ccedfa93f1bfda08fa2c00562b22c177959fc0aa2688e77a692d5389"  # DigitalOcean API token (consider using Ansible Vault for security)
    spaces_access_key: "DO00DH84RGBMUHLMPFDL"  # Access key for DigitalOcean Spaces
    spaces_secret_key: "Sb3Jnj8taK3jCD1xvCKjurp7owSW+FB6YtCAb9CeE7k"  # Secret key for DigitalOcean Spaces (consider using Ansible Vault for security)
    space_name: "deeptoys-backup2"  # Name of the DigitalOcean Space for backups
    space_region: "ams3"  # Region of the DigitalOcean Space
    wp_path: "/var/www/html/wordpress"  # Path to the WordPress installation
    backup_path: "/backup/wordpress"  # Path where local backups will be stored
    db_name: "mywpdb"  # WordPress database name
    db_user: "myadmin"  # Database user
    db_password: "Admin@1234"  # Database password (consider using Ansible Vault for security)

  tasks:

    - name: Ensure zip is installed
      apt:
        name: zip
        state: present
        update_cache: yes

    - name: Install s3cmd
      apt:
        name: s3cmd
        state: present
        update_cache: yes

    - name: Configure s3cmd
      copy:
        dest: "/root/.s3cfg"
        content: |
          [default]
          access_key = {{ spaces_access_key }}
          secret_key = {{ spaces_secret_key }}
          use_https = True
          host_base = {{ space_region }}.digitaloceanspaces.com
          host_bucket = %(bucket)s.{{ space_region }}.digitaloceanspaces.com
        mode: '0600'
      notify:
        - Test s3cmd configuration

    - name: Create backup directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ backup_path }}"

    - name: Create WordPress backup script
      copy:
        dest: "/usr/local/bin/wordpress_backup.sh"
        content: |
          #!/bin/bash
          DATE=$(date +"%Y-%m-%d")
          WP_BACKUP_FILE="wordpress_backup_${DATE}.zip"
          cd {{ wp_path }}
          zip -r {{ backup_path }}/${WP_BACKUP_FILE} .
          s3cmd put {{ backup_path }}/${WP_BACKUP_FILE} s3://{{ space_name }}/{{ space_region }}/
        mode: '0755'

    - name: Schedule daily WordPress backup to every 30 minutes
      cron:
        name: "Every 30 minutes WordPress Backup"
        job: "/usr/local/bin/wordpress_backup.sh"
        minute: "*/30"
        hour: "*"
        user: root
    
    - name: Create WordPress database backup script
      copy:
        dest: "/usr/local/bin/wordpress_db_backup.sh"
        content: |
          #!/bin/bash
          DATE=$(date +"%Y-%m-%d")
          DB_BACKUP_PATH="{{ backup_path }}/db"
          mkdir -p ${DB_BACKUP_PATH}
          mysqldump -u {{ db_user }} -p'{{ db_password }}' {{ db_name }} > ${DB_BACKUP_PATH}/wordpress_db_${DATE}.sql
          zip -j ${DB_BACKUP_PATH}/wordpress_db_${DATE}.sql.zip ${DB_BACKUP_PATH}/wordpress_db_${DATE}.sql
          s3cmd put ${DB_BACKUP_PATH}/wordpress_db_${DATE}.sql.zip s3://{{ space_name }}/{{ space_region }}/db/
          rm ${DB_BACKUP_PATH}/wordpress_db_${DATE}.sql  # Remove the uncompressed file
        mode: '0755'

    - name: Schedule daily WordPress database backup to every 30 minutes
      cron:
        name: "Every 30 minutes WordPress Database Backup"
        job: "/usr/local/bin/wordpress_db_backup.sh"
        minute: "*/30"  
        hour: "*"
        user: root

    - name: Create backup cleanup script
      copy:
        dest: "/usr/local/bin/backup_cleanup.sh"
        content: |
          #!/bin/bash
          # Local cleanup
          find {{ backup_path }} -type f -name "*.zip" -mtime +30 -exec rm {} \;
          # DigitalOcean Spaces cleanup
          s3cmd ls s3://{{ space_name }}/{{ space_region }}/ | grep ' .*[.]zip$' | while read -r line; do
            createDate=`echo $line|awk {'print $1" "$2'}`
            createDate=`date -d"$createDate" +%s`
            olderThan=`date -d"-30 days" +%s`
            if [[ $createDate -lt $olderThan ]]
            then 
              fileName=`echo $line|awk {'print $4'}`
              if [[ $fileName != "" ]]
              then
                s3cmd del "$fileName"
              fi
            fi
          done
        mode: '0755'

    - name: Schedule cleanup of backups older than one month
      cron:
        name: "Monthly Backup Cleanup"
        job: "/usr/local/bin/backup_cleanup.sh"
        minute: "0"
        hour: "2"
        day: "1"
        user: root


  handlers:
    - name: Test s3cmd configuration
      command: "s3cmd ls s3://{{ space_name }}"
      ignore_errors: yes
